from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

import app.database.requests as rq
import app.keyboards as kb
import app.states as st
from config import GROUP_ID, LIMIT_TEXT_MESSAGE

question_router = Router()

"""
–í–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∫–ª–∏–Ω–∏–∫–∏.

"""

@question_router.callback_query(F.data == "ask_doc")
async def get_ask_doc(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        text=(
            "–í—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞. " 
            "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n" 
            "–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è"
        ), 
        reply_markup=kb.ask_menu
    )

@question_router.callback_query(F.data == "start_ask")
async def ask_doc_init(callback: CallbackQuery, state: FSMContext):    
    await state.set_state(st.Specialists.specialist)
    await callback.answer()
    await callback.message.answer(
        text=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É"
        ), 
        reply_markup=kb.ask_kind_of_specialist
    )
    

@question_router.message(st.Specialists.specialist, F.text.in_(['–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥—É', '–¢–µ—Ä–∞–ø–µ–≤—Ç—É', '–û—Ä—Ç–æ–ø–µ–¥—É', '–ù–µ –∑–Ω–∞—é –∫–æ–º—É']))
async def ask_doc_get_specialist(message: Message, state: FSMContext):  
    await state.update_data(specialist=message.text)
    await state.set_state(st.Specialists.kind_of_pet)
    await message.answer(
        text=(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø–∏—Ç–æ–º—Ü–∞.\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É"
        ), 
        reply_markup=kb.ask_kind_of_pet
    )

@question_router.message(st.Specialists.specialist)
async def fail_specialist(message: Message):
    await message.answer(
        text=(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É"
        ), 
        reply_markup=kb.stop_fsm
    )

@question_router.message(st.Specialists.kind_of_pet, F.text.in_(['–ö–æ—à–∫–∞ üêà', '–°–æ–±–∞–∫–∞ ü¶Æ', '–î—Ä—É–≥–æ–µ ü™ø']))
async def ask_doc_get_pet(message: Message, state: FSMContext): 
    await state.update_data(kind_of_pet=message.text)
    await state.set_state(st.Specialists.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")

@question_router.message(st.Specialists.kind_of_pet)
async def fail_pet(message: Message):
    await message.answer(
        text=(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞\n"
            "–ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É"
        ), 
        reply_markup=kb.stop_fsm
    )

@question_router.message(st.Specialists.text, F.text)
async def ask_doc_get_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(st.Specialists.contact)
    await message.answer(
        text=(
            "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏. "
            "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ '—á–∞—Ç', "
            "–µ—Å–ª–∏ –í–∞–º –Ω—É–∂–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )
    )

@question_router.message(st.Specialists.text)
async def fail_text(message: Message):
    await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!") 

@question_router.message(st.Specialists.contact, F.text)
async def ask_doc_get_contact(message: Message, state: FSMContext):
    if len(message.text) > LIMIT_TEXT_MESSAGE:
        return await message.reply(
            text=(
                f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç. "
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤.\n" 
                f"–õ–∏–º–∏—Ç: {LIMIT_TEXT_MESSAGE} —Å–∏–º–≤–æ–ª–æ–≤."
            )
        )
    await state.update_data(contact=message.text)
    data = await state.get_data()
    await message.answer(
        text=(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π!\n"
            f"<i>–ö–æ–º—É –≤–æ–ø—Ä–æ—Å</i>: {data['specialist']}\n"
            f"<i>–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</i>: {data['kind_of_pet']}\n"
            f"<i>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</i>: {data['text']}\n"
            f"<i>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏</i>: {data['contact']}\n"     
        ), 
        parse_mode=ParseMode.HTML,
        reply_markup=kb.get_ask
    )

"""
@router.message(SupportedMediaFilter(), F.chat.type == 'private')
async def supported_media(message: Message):
    if message.caption and len(message.caption) > 1000:
        return await message.reply(text='–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –û–ø–∏—Å–∞–Ω–∏–µ '
                                        '–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
    await message.copy_to(
        chat_id=settings.GROUP_ID,
        caption=((message.caption or "") +
                 f"\n\n –¢–∏–∫–µ—Ç: #id{message.from_user.id}"),
        parse_mode="HTML"
    )
    session_generator = get_async_session()
    session = await session_generator.__anext__()
    db_user = await crud_user.get_or_create_user_by_tg_message(message, session)
    if check_user_is_banned(db_user):
        return
    message_data = {
        'telegram_user_id': message.from_user.id,
        'attachments': True,
    }
    if message.caption:
        message_data['text'] = message.caption
    await crud_message.create(message_data, session)

"""


@question_router.message(st.Specialists.contact)
async def fail_contact(message: Message):
    await message.answer("–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!") 

# –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –º–µ–¥–∏–∞, —Ç–æ –≤ –±–¥ 

@question_router.callback_query(F.data == "push")
async def ask_doc_get_permission(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await callback.answer()
    await callback.message.answer(
        text=(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º!\n"
            "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è...\n"
        ),
        reply_markup=ReplyKeyboardRemove())

    await callback.message.answer(
        text=(
            "<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –î–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ <i>–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º—ã–º —á–∞—Ç–æ–º</i> —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. " 
            "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.\n"
            "–ï—Å–ª–∏ —É –í–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–ª–∏–Ω–∏–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
        ), 
        parse_mode=ParseMode.HTML,
        reply_markup=kb.back_to_menu
    )

    await rq.set_question(callback.from_user.id, data['specialist'], data['text'])

    await bot.send_message(
        chat_id=GROUP_ID,
        text=(
            f"<i>–ö–æ–º—É –≤–æ–ø—Ä–æ—Å</i>: #{data['specialist']}\n"
            f"<i>–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</i>: {data['kind_of_pet']}\n"
            f"<i>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞</i>:\n{data['text']}\n"
            f"<i>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏</i>: {data['contact']}\n"
            f"<i>–û—Ç</i>: @{callback.from_user.username} | #id{callback.from_user.id}"
        ), parse_mode=ParseMode.HTML
    )
    await state.clear()
